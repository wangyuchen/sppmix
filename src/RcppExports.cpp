// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// invmat2d_sppmix
mat invmat2d_sppmix(mat const& A);
RcppExport SEXP sppmix_invmat2d_sppmix(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< mat const& >::type A(ASEXP);
    __result = Rcpp::wrap(invmat2d_sppmix(A));
    return __result;
END_RCPP
}
// rUnifab_sppmix
double rUnifab_sppmix(double const& a, double const& b);
RcppExport SEXP sppmix_rUnifab_sppmix(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double const& >::type a(aSEXP);
    Rcpp::traits::input_parameter< double const& >::type b(bSEXP);
    __result = Rcpp::wrap(rUnifab_sppmix(a, b));
    return __result;
END_RCPP
}
// rUnif_sppmix
double rUnif_sppmix();
RcppExport SEXP sppmix_rUnif_sppmix() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(rUnif_sppmix());
    return __result;
END_RCPP
}
// rnorm2_sppmix
arma::mat rnorm2_sppmix(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP sppmix_rnorm2_sppmix(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(rnorm2_sppmix(n, mu, sigma));
    return __result;
END_RCPP
}
// rWishart_sppmix
mat rWishart_sppmix(int const& df, mat const& A);
RcppExport SEXP sppmix_rWishart_sppmix(SEXP dfSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< mat const& >::type A(ASEXP);
    __result = Rcpp::wrap(rWishart_sppmix(df, A));
    return __result;
END_RCPP
}
// rDiscrete_sppmix
int rDiscrete_sppmix(int const& start, int const& end, vec const& probs);
RcppExport SEXP sppmix_rDiscrete_sppmix(SEXP startSEXP, SEXP endSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type start(startSEXP);
    Rcpp::traits::input_parameter< int const& >::type end(endSEXP);
    Rcpp::traits::input_parameter< vec const& >::type probs(probsSEXP);
    __result = Rcpp::wrap(rDiscrete_sppmix(start, end, probs));
    return __result;
END_RCPP
}
// rBinom_sppmix
int rBinom_sppmix(int const& n, double const& p);
RcppExport SEXP sppmix_rBinom_sppmix(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< double const& >::type p(pSEXP);
    __result = Rcpp::wrap(rBinom_sppmix(n, p));
    return __result;
END_RCPP
}
// rGamma_sppmix
double rGamma_sppmix(double const& a, double const& b);
RcppExport SEXP sppmix_rGamma_sppmix(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double const& >::type a(aSEXP);
    Rcpp::traits::input_parameter< double const& >::type b(bSEXP);
    __result = Rcpp::wrap(rGamma_sppmix(a, b));
    return __result;
END_RCPP
}
// rExp_sppmix
double rExp_sppmix(double const& a);
RcppExport SEXP sppmix_rExp_sppmix(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double const& >::type a(aSEXP);
    __result = Rcpp::wrap(rExp_sppmix(a));
    return __result;
END_RCPP
}
// rDirichlet_sppmix
vec rDirichlet_sppmix(vec const& d);
RcppExport SEXP sppmix_rDirichlet_sppmix(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< vec const& >::type d(dSEXP);
    __result = Rcpp::wrap(rDirichlet_sppmix(d));
    return __result;
END_RCPP
}
// genNormMix_sppmix
mat genNormMix_sppmix(int const& n, List const& mix);
RcppExport SEXP sppmix_genNormMix_sppmix(SEXP nSEXP, SEXP mixSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< List const& >::type mix(mixSEXP);
    __result = Rcpp::wrap(genNormMix_sppmix(n, mix));
    return __result;
END_RCPP
}
// ApproxCompMass_sppmix
double ApproxCompMass_sppmix(int const& LL, vec const& ticsx, vec const& ticsy, mat const& areas, vec const& mu, mat const& sig, mat const& siginv);
RcppExport SEXP sppmix_ApproxCompMass_sppmix(SEXP LLSEXP, SEXP ticsxSEXP, SEXP ticsySEXP, SEXP areasSEXP, SEXP muSEXP, SEXP sigSEXP, SEXP siginvSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ticsx(ticsxSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ticsy(ticsySEXP);
    Rcpp::traits::input_parameter< mat const& >::type areas(areasSEXP);
    Rcpp::traits::input_parameter< vec const& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< mat const& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< mat const& >::type siginv(siginvSEXP);
    __result = Rcpp::wrap(ApproxCompMass_sppmix(LL, ticsx, ticsy, areas, mu, sig, siginv));
    return __result;
END_RCPP
}
// ApproxMHRatiomu_sppmix
double ApproxMHRatiomu_sppmix(int const& LL, vec const& ticsx, vec const& ticsy, mat const& areas, vec const& curmu, vec const& propmu, mat const& sig, mat const& siginv);
RcppExport SEXP sppmix_ApproxMHRatiomu_sppmix(SEXP LLSEXP, SEXP ticsxSEXP, SEXP ticsySEXP, SEXP areasSEXP, SEXP curmuSEXP, SEXP propmuSEXP, SEXP sigSEXP, SEXP siginvSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ticsx(ticsxSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ticsy(ticsySEXP);
    Rcpp::traits::input_parameter< mat const& >::type areas(areasSEXP);
    Rcpp::traits::input_parameter< vec const& >::type curmu(curmuSEXP);
    Rcpp::traits::input_parameter< vec const& >::type propmu(propmuSEXP);
    Rcpp::traits::input_parameter< mat const& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< mat const& >::type siginv(siginvSEXP);
    __result = Rcpp::wrap(ApproxMHRatiomu_sppmix(LL, ticsx, ticsy, areas, curmu, propmu, sig, siginv));
    return __result;
END_RCPP
}
// ApproxMHRatiosig_sppmix
double ApproxMHRatiosig_sppmix(int const& LL, vec const& ticsx, vec const& ticsy, mat const& areas, vec const& mu1, mat const& propsigma, mat const& sig, mat const& siginv);
RcppExport SEXP sppmix_ApproxMHRatiosig_sppmix(SEXP LLSEXP, SEXP ticsxSEXP, SEXP ticsySEXP, SEXP areasSEXP, SEXP mu1SEXP, SEXP propsigmaSEXP, SEXP sigSEXP, SEXP siginvSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ticsx(ticsxSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ticsy(ticsySEXP);
    Rcpp::traits::input_parameter< mat const& >::type areas(areasSEXP);
    Rcpp::traits::input_parameter< vec const& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< mat const& >::type propsigma(propsigmaSEXP);
    Rcpp::traits::input_parameter< mat const& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< mat const& >::type siginv(siginvSEXP);
    __result = Rcpp::wrap(ApproxMHRatiosig_sppmix(LL, ticsx, ticsy, areas, mu1, propsigma, sig, siginv));
    return __result;
END_RCPP
}
// rMultinomial_sppmix
ivec rMultinomial_sppmix(int const& n, vec const& ps);
RcppExport SEXP sppmix_rMultinomial_sppmix(SEXP nSEXP, SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ps(psSEXP);
    __result = Rcpp::wrap(rMultinomial_sppmix(n, ps));
    return __result;
END_RCPP
}
// DAMCMC2d_sppmix
List DAMCMC2d_sppmix(mat const& data, vec const& xlims, vec const& ylims, int const& m, int const& L, int const& burnin, bool const& truncate);
RcppExport SEXP sppmix_DAMCMC2d_sppmix(SEXP dataSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP mSEXP, SEXP LSEXP, SEXP burninSEXP, SEXP truncateSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< mat const& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< int const& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int const& >::type L(LSEXP);
    Rcpp::traits::input_parameter< int const& >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< bool const& >::type truncate(truncateSEXP);
    __result = Rcpp::wrap(DAMCMC2d_sppmix(data, xlims, ylims, m, L, burnin, truncate));
    return __result;
END_RCPP
}
// invmat2d
arma::mat invmat2d(arma::mat const& A);
RcppExport SEXP sppmix_invmat2d(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    __result = Rcpp::wrap(invmat2d(A));
    return __result;
END_RCPP
}
// rnorm2
arma::mat rnorm2(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP sppmix_rnorm2(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(rnorm2(n, mu, sigma));
    return __result;
END_RCPP
}
// rDirichlet
arma::vec rDirichlet(arma::vec const& d);
RcppExport SEXP sppmix_rDirichlet(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec const& >::type d(dSEXP);
    __result = Rcpp::wrap(rDirichlet(d));
    return __result;
END_RCPP
}
// rWishart
arma::mat rWishart(int const& df, arma::mat const& A);
RcppExport SEXP sppmix_rWishart(SEXP dfSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    __result = Rcpp::wrap(rWishart(df, A));
    return __result;
END_RCPP
}
// rBinom
int rBinom(int const& n, double const& p);
RcppExport SEXP sppmix_rBinom(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< double const& >::type p(pSEXP);
    __result = Rcpp::wrap(rBinom(n, p));
    return __result;
END_RCPP
}
// ApproxCompMass
double ApproxCompMass(int const& LL, arma::vec const& ticsx, arma::vec const& ticsy, arma::mat const& areas, arma::vec const& mu, arma::mat const& sig, arma::mat const& siginv);
RcppExport SEXP sppmix_ApproxCompMass(SEXP LLSEXP, SEXP ticsxSEXP, SEXP ticsySEXP, SEXP areasSEXP, SEXP muSEXP, SEXP sigSEXP, SEXP siginvSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ticsx(ticsxSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ticsy(ticsySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type areas(areasSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type siginv(siginvSEXP);
    __result = Rcpp::wrap(ApproxCompMass(LL, ticsx, ticsy, areas, mu, sig, siginv));
    return __result;
END_RCPP
}
// ApproxMHRatiomu
double ApproxMHRatiomu(int const& LL, arma::vec const& ticsx, arma::vec const& ticsy, arma::mat const& areas, arma::vec const& curmu, arma::vec const& propmu, arma::mat const& sig, arma::mat const& siginv);
RcppExport SEXP sppmix_ApproxMHRatiomu(SEXP LLSEXP, SEXP ticsxSEXP, SEXP ticsySEXP, SEXP areasSEXP, SEXP curmuSEXP, SEXP propmuSEXP, SEXP sigSEXP, SEXP siginvSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ticsx(ticsxSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ticsy(ticsySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type areas(areasSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type curmu(curmuSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type propmu(propmuSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type siginv(siginvSEXP);
    __result = Rcpp::wrap(ApproxMHRatiomu(LL, ticsx, ticsy, areas, curmu, propmu, sig, siginv));
    return __result;
END_RCPP
}
// ApproxMHRatiosig
double ApproxMHRatiosig(int const& LL, arma::vec const& ticsx, arma::vec const& ticsy, arma::mat const& areas, arma::vec const& mu1, arma::mat const& propsigma, arma::mat const& sig, arma::mat const& siginv);
RcppExport SEXP sppmix_ApproxMHRatiosig(SEXP LLSEXP, SEXP ticsxSEXP, SEXP ticsySEXP, SEXP areasSEXP, SEXP mu1SEXP, SEXP propsigmaSEXP, SEXP sigSEXP, SEXP siginvSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ticsx(ticsxSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ticsy(ticsySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type areas(areasSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type propsigma(propsigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type siginv(siginvSEXP);
    __result = Rcpp::wrap(ApproxMHRatiosig(LL, ticsx, ticsy, areas, mu1, propsigma, sig, siginv));
    return __result;
END_RCPP
}
// rMultinomial
arma::vec rMultinomial(int const& n, arma::vec const& p);
RcppExport SEXP sppmix_rMultinomial(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type p(pSEXP);
    __result = Rcpp::wrap(rMultinomial(n, p));
    return __result;
END_RCPP
}
// DAMCMC2d
List DAMCMC2d(arma::mat const& data, arma::vec const& xlims, arma::vec const& ylims, int const& m, int const& L, int const& burnin, bool const& truncate);
RcppExport SEXP sppmix_DAMCMC2d(SEXP dataSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP mSEXP, SEXP LSEXP, SEXP burninSEXP, SEXP truncateSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat const& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< int const& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int const& >::type L(LSEXP);
    Rcpp::traits::input_parameter< int const& >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< bool const& >::type truncate(truncateSEXP);
    __result = Rcpp::wrap(DAMCMC2d(data, xlims, ylims, m, L, burnin, truncate));
    return __result;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP sppmix_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(rcpparma_hello_world());
    return __result;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP sppmix_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    __result = Rcpp::wrap(rcpparma_outerproduct(x));
    return __result;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP sppmix_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    __result = Rcpp::wrap(rcpparma_innerproduct(x));
    return __result;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP sppmix_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    __result = Rcpp::wrap(rcpparma_bothproducts(x));
    return __result;
END_RCPP
}
