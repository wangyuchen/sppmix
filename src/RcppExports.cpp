// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// invmat2d
arma::mat invmat2d(arma::mat const& A);
RcppExport SEXP sppmix_invmat2d(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    __result = Rcpp::wrap(invmat2d(A));
    return __result;
END_RCPP
}
// rnorm2
arma::mat rnorm2(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP sppmix_rnorm2(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    __result = Rcpp::wrap(rnorm2(n, mu, sigma));
    return __result;
END_RCPP
}
// rDirichlet
arma::vec rDirichlet(arma::vec const& d);
RcppExport SEXP sppmix_rDirichlet(SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::vec const& >::type d(dSEXP);
    __result = Rcpp::wrap(rDirichlet(d));
    return __result;
END_RCPP
}
// rWishart
arma::mat rWishart(int const& df, arma::mat const& A);
RcppExport SEXP sppmix_rWishart(SEXP dfSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type A(ASEXP);
    __result = Rcpp::wrap(rWishart(df, A));
    return __result;
END_RCPP
}
// rBinom
int rBinom(int const& n, double const& p);
RcppExport SEXP sppmix_rBinom(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< double const& >::type p(pSEXP);
    __result = Rcpp::wrap(rBinom(n, p));
    return __result;
END_RCPP
}
// ApproxCompMass
double ApproxCompMass(int const& LL, arma::vec const& ticsx, arma::vec const& ticsy, arma::mat const& areas, arma::vec const& mu, arma::mat const& sig, arma::mat const& siginv);
RcppExport SEXP sppmix_ApproxCompMass(SEXP LLSEXP, SEXP ticsxSEXP, SEXP ticsySEXP, SEXP areasSEXP, SEXP muSEXP, SEXP sigSEXP, SEXP siginvSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ticsx(ticsxSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ticsy(ticsySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type areas(areasSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type siginv(siginvSEXP);
    __result = Rcpp::wrap(ApproxCompMass(LL, ticsx, ticsy, areas, mu, sig, siginv));
    return __result;
END_RCPP
}
// ApproxMHRatiomu
double ApproxMHRatiomu(int const& LL, arma::vec const& ticsx, arma::vec const& ticsy, arma::mat const& areas, arma::vec const& curmu, arma::vec const& propmu, arma::mat const& sig, arma::mat const& siginv);
RcppExport SEXP sppmix_ApproxMHRatiomu(SEXP LLSEXP, SEXP ticsxSEXP, SEXP ticsySEXP, SEXP areasSEXP, SEXP curmuSEXP, SEXP propmuSEXP, SEXP sigSEXP, SEXP siginvSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ticsx(ticsxSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ticsy(ticsySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type areas(areasSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type curmu(curmuSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type propmu(propmuSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type siginv(siginvSEXP);
    __result = Rcpp::wrap(ApproxMHRatiomu(LL, ticsx, ticsy, areas, curmu, propmu, sig, siginv));
    return __result;
END_RCPP
}
// ApproxMHRatiosig
double ApproxMHRatiosig(int const& LL, arma::vec const& ticsx, arma::vec const& ticsy, arma::mat const& areas, arma::vec const& mu1, arma::mat const& propsigma, arma::mat const& sig, arma::mat const& siginv);
RcppExport SEXP sppmix_ApproxMHRatiosig(SEXP LLSEXP, SEXP ticsxSEXP, SEXP ticsySEXP, SEXP areasSEXP, SEXP mu1SEXP, SEXP propsigmaSEXP, SEXP sigSEXP, SEXP siginvSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ticsx(ticsxSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ticsy(ticsySEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type areas(areasSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type propsigma(propsigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type siginv(siginvSEXP);
    __result = Rcpp::wrap(ApproxMHRatiosig(LL, ticsx, ticsy, areas, mu1, propsigma, sig, siginv));
    return __result;
END_RCPP
}
// rMultinomial
arma::vec rMultinomial(int const& n, arma::vec const& p);
RcppExport SEXP sppmix_rMultinomial(SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int const& >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type p(pSEXP);
    __result = Rcpp::wrap(rMultinomial(n, p));
    return __result;
END_RCPP
}
// DAMCMC2d
List DAMCMC2d(arma::mat const& data, arma::vec const& xlims, arma::vec const& ylims, int const& m, int const& L, int const& burnin, bool const& truncate);
RcppExport SEXP sppmix_DAMCMC2d(SEXP dataSEXP, SEXP xlimsSEXP, SEXP ylimsSEXP, SEXP mSEXP, SEXP LSEXP, SEXP burninSEXP, SEXP truncateSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat const& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type xlims(xlimsSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type ylims(ylimsSEXP);
    Rcpp::traits::input_parameter< int const& >::type m(mSEXP);
    Rcpp::traits::input_parameter< int const& >::type L(LSEXP);
    Rcpp::traits::input_parameter< int const& >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< bool const& >::type truncate(truncateSEXP);
    __result = Rcpp::wrap(DAMCMC2d(data, xlims, ylims, m, L, burnin, truncate));
    return __result;
END_RCPP
}
